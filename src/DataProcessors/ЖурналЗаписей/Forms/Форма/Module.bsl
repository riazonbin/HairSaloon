
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	ОбновитьДиапазоныЧасовРаботы();
	
	Дата = ТекущаяДата();
	
	ОбновитьВремяОтображенияПланировщика();
	ЗаполнитьИзмеренияПланировщика();
	
	ЗаполнитьЖурналЗаписями();
КонецПроцедуры


&НаСервере
Процедура ОбновитьВремяОтображенияПланировщика()

	НачалоРабочегоДняСтандарт = НачалоДня(Дата);
	КонецРабочегоДняСтандарт = КонецДня(Дата);

	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоРабочегоДняСтандарт, КонецРабочегоДняСтандарт);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДиапазоныЧасовРаботы()
	НомерДняНедели = ДеньНедели(Дата);
	
	ДниНедели = Новый Соответствие();
	ДниНедели.Вставить(1, Перечисления.ДниНедели.Понедельник);
	ДниНедели.Вставить(2, Перечисления.ДниНедели.Вторник);
	ДниНедели.Вставить(3, Перечисления.ДниНедели.Среда);
	ДниНедели.Вставить(4, Перечисления.ДниНедели.Четверг);
	ДниНедели.Вставить(5, Перечисления.ДниНедели.Пятница);
	ДниНедели.Вставить(6, Перечисления.ДниНедели.Суббота);
    ДниНедели.Вставить(7, Перечисления.ДниНедели.Воскресенье);
	
	ТекущийДеньНедели = ДниНедели.Получить(НомерДняНедели);

	
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ЗапросСалона = Новый Запрос;
	ЗапросСалона.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Салоны.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Салоны КАК Салоны";
	
	РезультатЗапроса = ЗапросСалона.Выполнить();
	
	РезультатСалон = РезультатЗапроса.Выбрать();
	
	РезультатСалон.Следующий();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СалоныРежимРаботы.ДеньНедели КАК ДеньНедели,
		|	СалоныРежимРаботы.ВремяНачала КАК ВремяНачала,
		|	СалоныРежимРаботы.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	Справочник.Салоны.РежимРаботы КАК СалоныРежимРаботы
		|ГДЕ
		|	СалоныРежимРаботы.Ссылка = &Салон
		|	И СалоныРежимРаботы.ДеньНедели = &ДеньНедели";
	
	Запрос.УстановитьПараметр("ДеньНедели", ТекущийДеньНедели);
	Запрос.УстановитьПараметр("Салон", РезультатСалон.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();

	КонецЕсли;
		
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Планировщик.ОтступСНачалаПереносаШкалыВремени = Формат(ВыборкаДетальныеЗаписи.ВремяНачала,"ДФ=Ч");
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - Формат(ВыборкаДетальныеЗаписи.ВремяОкончания,"ДФ=Ч");
	

КонецПроцедуры // ОбновитьДиапазоныЧасовРаботы()


&НаСервере
Процедура ЗаполнитьЖурналЗаписями()
	
	Планировщик.Элементы.Очистить();
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Запись.Дата КАК Дата,
		|	Запись.Сотрудник КАК Сотрудник,
		|	Запись.Клиент КАК Клиент,
		|	Запись.Услуги.(
		|		Ссылка КАК Ссылка,
		|		Услуга КАК Услуга
		|	) КАК Услуги,
		|	Запись.Сумма КАК Сумма,
		|	Запись.Клиент.Телефон КАК Телефон,
		|	Запись.Комментарий КАК Комментарий,
		|	Запись.ДатаОкончания КАК ДатаОкончания,
		|	Запись.Ссылка КАК Ссылка,
		|	Запись.Цвет КАК Цвет
		|ИЗ
		|	Документ.Запись КАК Запись
		|ГДЕ
		|	Запись.Проведен
		|	И Запись.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УслугиПоЗаписи = Выборка.Услуги.Выгрузить();
		СтрокаУслуг = "";

		СоответствиеСотрудник = Новый Соответствие();
		СоответствиеСотрудник.Вставить("Сотрудник", Выборка.Сотрудник);
				
		МассивСтрок = Новый Массив();
		
		Для каждого Услуга Из УслугиПоЗаписи Цикл
		    Если СтрокаУслуг = "" Тогда
        		СтрокаУслуг = Услуга.Услуга.Наименование;
				
				Если УслугиПоЗаписи.Количество() <> 1 Тогда
					СтрокаУслуг = СтрокаУслуг + ", ";
				КонецЕсли; 
				
				Продолжить;
			КонецЕсли;
			СтрокаУслуг = СтрокаУслуг + Услуга.Услуга.Наименование;
		
		КонецЦикла;
		
		ЖирныйШрифт = Новый Шрифт(,,Истина);
		
		ПредставлениеКлиента = Строка(Выборка.Клиент) + ", " + Выборка.Телефон;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКлиента, ЖирныйШрифт));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(СтрокаУслуг);
		МассивСтрок.Добавить(Символы.ПС);
		Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
		
			МассивСтрок.Добавить("-- " +Выборка.Комментарий);	
		
		КонецЕсли;
		
		
		ЭлементПланировщика = Планировщик.Элементы.Добавить(Выборка.Дата, Выборка.ДатаОкончания);
		ЭлементПланировщика.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеСотрудник);
		ЭлементПланировщика.Значение = Выборка.Ссылка;
		ЭлементПланировщика.Текст = Новый ФорматированнаяСтрока(МассивСтрок);
		ЦветЭлементаПланировщика = Выборка.Цвет.Получить();
		Если ЦветЭлементаПланировщика <> Неопределено Тогда	
			ЭлементПланировщика.ЦветФона = Выборка.Цвет.Получить(); 			
		КонецЕсли;

	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмеренияПланировщика()
	Планировщик.Измерения.Очистить();
	
	Измерение = Планировщик.Измерения.Добавить("Сотрудник");
	
	ВыборкаСотрудников = Справочники.Сотрудники.Выбрать();
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		
		Если ВыборкаСотрудников.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Измерение.Элементы.Добавить(ВыборкаСотрудников.Ссылка);
		Измерение.ЦветРамки = WebЦвета.Васильковый;

	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьИзмеренияПланировщика();
	ЗаполнитьЖурналЗаписями();
	ОбновитьВремяОтображенияПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	Дата = ТекущиеПериодыОтображения.Получить(0).Начало;
	ОбновитьДиапазоныЧасовРаботы();
	ЗаполнитьЖурналЗаписями();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, ЗначенияИзмерений, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", Начало);
	ЗначенияЗаполнения.Вставить("ДатаОкончания", Конец);
	ЗначенияЗаполнения.Вставить("Сотрудник", ЗначенияИзмерений["Сотрудник"]);
	
	СтруктураДанных = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.Запись.ФормаОбъекта", СтруктураДанных,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Изменение_Запись" Тогда	
		ЗаполнитьЖурналЗаписями();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыделенныеЭлементы = Элемент.ВыделенныеЭлементы;
	ТекЗапись = ВыделенныеЭлементы.Получить(0).Значение;
	
	
	СтруктураДанных = Новый Структура("Ключ", ТекЗапись);
	
	ОткрытьФорму("Документ.Запись.ФормаОбъекта", СтруктураДанных,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	ВыделенныеЭлементы = Элемент.ВыделенныеЭлементы;
	ЭлементПланировщика = ВыделенныеЭлементы.Получить(0);
	
	НовыеЗначенияРеквизитов = Новый Структура();
	НовыеЗначенияРеквизитов.Вставить("Сотрудник", ЭлементПланировщика.ЗначенияИзмерений["Сотрудник"]);
	НовыеЗначенияРеквизитов.Вставить("Дата", ЭлементПланировщика.Начало);
	НовыеЗначенияРеквизитов.Вставить("ДатаОкончания", ЭлементПланировщика.Конец);
	
	ОбновитьДанныеЗаписи(ЭлементПланировщика.Значение, НовыеЗначенияРеквизитов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеЗаписи(СсылкаНаЗапись, НовыеЗначенияРеквизитов)

	Запись = СсылкаНаЗапись.ПолучитьОбъект();
	
	ЕстьИзменениеЗаписи = Ложь;
	
	Для каждого Реквизит Из НовыеЗначенияРеквизитов Цикл
	
		 Если Запись[Реквизит.Ключ] <> Реквизит.Значение Тогда		
		 	ЕстьИзменениеЗаписи = Истина;
			Прервать;
		 КонецЕсли;
	
	 КонецЦикла;
	 
	Если ЕстьИзменениеЗаписи Тогда
	 	ЗаполнитьЗначенияСвойств(Запись, НовыеЗначенияРеквизитов);
		Запись.Длительность = (Запись.ДатаОкончания - Запись.Дата) / 60;
		Запись.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры



